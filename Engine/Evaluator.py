from Lexical_Analyzer.LexicalAnalyzer import LexicalAnalyzer
from Parser.Parser import Parser
from Standardizer.ASTFactory import ASTFactory
from Exception.CustomException import CustomException
from Engine.CSEMachineFactory import  CSEMachineFactory

class Evaluvator:
    @staticmethod
    def evaluvate(filename, isPrintAST, isPrintST):
        scanner = LexicalAnalyzer(filename)
        try:
            tokens = scanner.scan()
            #print("Tokens Generated")

            if not tokens:
                print("Empty PROGRAM!!!!!!!!")
                return ""
            parser = Parser(tokens)
            AST = parser.parse()
            #print("Parsing is  Done")

            stringAST = parser.convert_AST_to_StringAST()

            #print("stringAST is  done")

            if isPrintAST:
                for string in stringAST:
                    print(string)
 
            #print("Successfully printed stringAST")

            astf = ASTFactory()  # create abstract syntax tree factory

            #print("astf created")

            ast = astf.get_abstract_syntax_tree(stringAST)  # get abstract syntax tree from astf using file data

            #print("start the standadization")

            ast.standardize()
            if isPrintST:
                ast.print_ast()  # standardize ast

            #print("standardized tree successfully created")

            csemfac = CSEMachineFactory()  # create CSE machine factory
            
            csemachine = csemfac.get_cse_machine(ast)  # get CSE machine with CSE generated by AST
            print("Output of the above program is:")
            return csemachine.get_answer()
        
        except CustomException as e:
            print(e.message)
        
        return None
